# entities
#   author: name, email
#   blog: message, timeOfCreation, comments, likes

type Query {
  # show info
  info: String!

  # read blogs
  feed: Feed!

  # find uesr
  user(userId: ID!): User!
}

type Mutation {
  # create blog
  createBlogPost(postText: String!): BlogPost!

  # update blog
  updateBlogPost(blogPostId: ID!, postText: String!): BlogPost

  # delete blog
  deleteBlogPost(blogPostId: ID!): BlogPost!

  # like blog
  likeBlogPost(blogPostId: ID!): Like!

  # unlike blog post
  unlikeBlogPost(blogPostId: ID!): Like!

  # Comment on blog
  comment(blogPostId: ID!): Comment!

  # Delete comment on blog
  deleteComment(commentId: ID!): Comment!

  # Reply comment
  replyComment(commentId: ID!, message: String!): Reply!

  # Create user
  createUser(name: String!, email: String!): User!

  # Delete user
  deleteUser(userId: ID!): User!
}

type Feed {
  posts: [BlogPost!]!
  count: Int
}

type User {
  id: ID!
  name: String!
  email: String!
  posts: [BlogPost!]!
}

type BlogPost {
  id: ID!
  postText: String!
  postedBy: User!
  comments: [Comment!]!
  likes: Like!
  createdAt: DateTime
}

type Comment {
  id: ID!
  message: String!
  post: BlogPost!
  replies: [Reply!]!
  postedBy: User!
  createdAt: DateTime
}

type Reply {
  id: ID!
  message: String!
  post: BlogPost!
  postedBy: User!
  createdAt: DateTime
}

type Like {
  id: ID!
  post: BlogPost!
  user: User!
  count: Int!
}

scalar DateTime
